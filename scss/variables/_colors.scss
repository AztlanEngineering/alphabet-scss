
/*---  Monochrome  ---*/
$white:#fff!default;
$offWhite:#f5f5f5!default;
$lightGrey:#dedede!default;
$grey:#a7a8a9!default;
$darkGrey:#424242!default;
$offBlack:#1b1c1d!default;
$black:#1b1c1d!default;

/*---  Colors  ---*/
$red:#aa4465!default; //A
$orange:#fd5200!default;
$yellow:#ecc30b!default;
$olive:#ade25d!default;
$green:#52b788!default;
$teal:#00c4b3!default;
$blue:#213a8f!default;
$violet:#4b3f72!default;
$purple:#715aff!default;
$pink:#ee4266!default;
$brown:#a5673f!default;
$indigo:#223843!default;

/*---  Light Colors  ---*/
$lightRed:#ff695e!default;
$lightOrange:#ffa16b!default;
$lightYellow:#f4d35e!default;
$lightOlive:#d9e778!default;
$lightGreen:#2ecc40!default;
$lightTeal:#74e0d7!default;
$lightBlue:#22aed1!default;
$lightViolet:#a291fb!default;
$lightPurple:#a682ff!default;
$lightPink:#ff8edf!default;
$lightBrown:#d67c1c!default;

/*---  Dark Colors  ---*/
$darkRed:#ff695e!default;
$darkOrange:#ffa16b!default;
$darkYellow:#f4d35e!default;
$darkOlive:#d9e778!default;
$darkGreen:#2ecc40!default;
$darkTeal:#74e0d7!default;
$darkBlue:#1045b1!default;
$darkViolet:#a291fb!default;
$darkPurple:#a682ff!default;
$darkPink:#ff8edf!default;
$darkBrown:#d67c1c!default;

/*--- Brand colors ---*/
$facebookColor:#3b5998!default;
$twitterColor:#55acee!default;
$googlePlusColor:#dd4b39!default;
$linkedInColor:#1f88be!default;
$youtubeColor:#f00!default;
$pinterestColor:#bd081c!default;
$vkColor:#4d7198!default;
$instagramColor:#49769c!default;

/*--- Link ---*/
$linkColor:$lightBlue!default;
$linkHoverColor:$teal!default;
$linkDiscreetColor:$lightGrey!default;


/*--- Default Theme ---*/
$default:$black!default;
$accent1:$teal!default;
$accent2:$orange!default;
$accent3:$blue!default;
$onAccent1:$white!default;
$onAccent2:$black!default;
$onAccent3:$white!default;
$defaultHover:$linkHoverColor!default;
$accent1Hover:$lightTeal!default;
$accent2Hover:$lightOrange!default;
$accent3Hover:$lightBlue!default;

/*--- Page colors ---*/
$pageBackground:$white!default;
$textColor:$default!default;
$headersColor:$accent1!default;
$invertedColor:$white!default;

/*--- Shadow color ---*/
$shadowColor:$black!default;
$shadowAlpha:.22!default;
$shadowAlphaXS:.15!default;
$shadowXYBlurXS:0 .2rem .3rem!default;
$shadowXYBlurSmall:0 .3rem .6rem!default;
$shadowXYBlurMedium:0 .6rem .8rem!default;
$shadowXYBlurLarge:0 .9rem 1rem!default;
$shadowXSmall:$shadowXYBlurXS rgba(red($shadowColor), green($shadowColor), blue($shadowColor), $shadowAlphaXS)!default;
$shadowSmall:$shadowXYBlurSmall rgba(red($shadowColor), green($shadowColor), blue($shadowColor), $shadowAlpha)!default;
$shadowMedium:$shadowXYBlurMedium rgba(red($shadowColor), green($shadowColor), blue($shadowColor), $shadowAlpha)!default;
$shadowLarge:$shadowXYBlurLarge rgba(red($shadowColor), green($shadowColor), blue($shadowColor), $shadowAlpha)!default;

/*--- Monochrome iterator ---*/
$cMonochrome:(
  'white':$white,
  'off-white':$offWhite,
	'light-grey':$lightGrey,
	'grey':$grey,
  'dark-grey':$darkGrey,
  'off-black':$offBlack,
  'black':$black,
)!default;
$cMonochromeHover:(
  'white':'light-grey',
  'off-white':'light-grey',
	'light-grey':'grey',
	'grey':'dark-grey',
  'dark-grey':'grey',
  'off-black':'grey',
  'black':'dark-grey',
)!default;

/*--- Colors iterator ---*/
$cColors:(
  'red':$red,
  'orange':$orange,
	'yellow':$yellow,
	'olive':$olive,
  'green':$green,
  'teal':$teal,
  'blue':$blue,
	'violet':$violet,
  'purple':$purple,
  'pink':$pink,
	'brown':$brown,
)!default;

$cColorsHover:(
  'red':'light-red',
  'orange':'light-orange',
  'yellow':'light-yellow',
	'olive':'light-olive',
  'green':'light-green',
  'teal':'light-teal',
	'blue':'light-blue',
	'violet':'light-violet',
  'purple':'light-purple',
  'pink':'light-pink',
	'brown':'light-brown',
)!default;

/*--- Light colors iterator ---*/
$cLightColors:(
  'red':$lightRed,
  'orange':$lightOrange,
  'yellow':$lightYellow,
	'olive':$lightOlive,
  'green':$lightGreen,
  'teal':$lightTeal,
	'blue':$lightBlue,
	'violet':$lightViolet,
  'purple':$lightPurple,
  'pink':$lightPink,
	'brown':$lightBrown,
)!default;

/*---Dark colors iterator ---*/
$cDarkColors:(
  'red':$darkRed,
  'orange':$darkOrange,
  'yellow':$darkYellow,
	'olive':$darkOlive,
  'green':$darkGreen,
  'teal':$darkTeal,
	'blue':$darkBlue,
	'violet':$darkViolet,
  'purple':$darkPurple,
  'pink':$darkPink,
	'brown':$darkBrown,
)!default;

/*--- Brand colors iterator ---*/
$cBrandColors:(
	'facebook':$facebookColor,
	'twitter':$twitterColor,
	'youtube':$youtubeColor,
	'instagram':$instagramColor,
)!default;

$cBrandHover:(
	'facebook':'blue',
	'twitter':'teal',
	'youtube':'red',
	'instagram':'blue',
)!default;

/*--- Link Colors ---*/
$cLinkColors:(
	'l':$linkColor,
	'lh':$linkHoverColor,
	'ld':$linkDiscreetColor,
);

/*--- Theme Colors ---*/
$cThemeColors:(
	'default':$default,
	'accent1':$accent1,
	'accent2':$accent2,
	'accent3':$accent3,
);
$cThemeHover:(
	'default':$defaultHover,
	'accent1':$accent1Hover,
	'accent2':$accent2Hover,
	'accent3':$accent3Hover,
);

/*--- Content In Colors ---*/
$darkColor:$black;
$lightColor:$white;
$cColorContrasts:(
  'red':$lightColor,
  'orange':$lightColor,
  'yellow':$darkColor,
	'olive':$darkColor,
  'green':$lightColor,
  'teal':$lightColor,
	'blue':$lightColor,
	'violet':$lightColor,
  'purple':$lightColor,
  'pink':$lightColor,
	'brown':$lightColor,
	'white':$darkColor,
	'off-white':$darkColor,
	'light-grey':$darkColor,
	'grey':$lightColor,
	'dark-grey':$lightColor,
	'off-black':$lightColor,
	'black':$lightColor,
	'facebook':$lightColor,
	'twitter':$lightColor,
	'youtube':$lightColor,
	'instagram':$lightColor,
	'default':$lightColor,
	'accent1':$onAccent1,
	'accent2':$onAccent2,
	'accent3':$onAccent3,
)!default;

@function contrastForColor($color)
{
  @return map-get($cColorContrasts, $color)
}

/*--- Shadow Classes ---*/
$cShadowSizes:(
	'xs':$shadowXSmall,
	'sm':$shadowSmall,
	'md':$shadowMedium,
	'lg':$shadowLarge,
)!default;

/*--- Disabled ---*/
$disabledColor:var(--grey);

/*--- Shadow Vars  ---*/
$shadowClassPrefix:'sh-'!default;
$shadowVarPrefix:$shadowClassPrefix!default;
$shadowHoverClassPrefix:'shh-'!default;
$shadowActiveClassPrefix:'sha-'!default;
$shadowInsetClassPrefix:'i'!default;

@mixin setShadowClasses($a:$cShadowSizes)
{
  @each $n, $c in $a
  {
    .#{$shadowClassPrefix}#{$n}
    {
      box-shadow:var(--#{$shadowVarPrefix}#{$n});
			--cs:var(--#{$shadowVarPrefix}#{$n});
    }
    .#{$shadowHoverClassPrefix}#{$n}
    {
      &:hover,
      &:focus
      {
        box-shadow:var(--#{$shadowVarPrefix}#{$n});
				--cs:var(--#{$shadowVarPrefix}#{$n});
      }
    }
		.#{$shadowInsetClassPrefix}#{$shadowHoverClassPrefix}#{$n}{
      box-shadow: inset var(--#{$shadowVarPrefix}#{$n});
			--cs:var(--#{$shadowVarPrefix}#{$n});
		}
		
  }
}

/*--- Hover Dict ---*/
$cHover:(
	'colors':$cColorsHover,
	'monochrome':$cMonochromeHover,
	'brand':$cBrandHover,
	'theme':$cThemeHover,
)!default;

@function HoverForColor($family, $color)
{
  @return map-get(map-get($cHover, $family),$color)
}

/*--- Collapsible-border / box-shadow ---*/
$boxShadowWidth:2px!default;
$boxShadowDefaultColor:$accent1;
$boxShadowDefaultX:$boxShadowWidth 0 0 0 var(--cc, var(--default, #{$boxShadowDefaultColor})),
      0 $boxShadowWidth 0 0 var(--cc, var(--default, #{$boxShadowDefaultColor})),
      //$boxShadowWidth $boxShadowWidth 0 0 var(--cc, var(--default, #{$boxShadowDefaultColor})),   /* Just to fix the corner */
      $boxShadowWidth 0 0 0 var(--cc, var(--default, #{$boxShadowDefaultColor})) inset,
      0 $boxShadowWidth 0 0 var(--cc, var(--default, #{$boxShadowDefaultColor})) inset!default;

/*
	$boxShadowDefault:$boxShadowWidth 0 0 0 var(--c),
      0 $boxShadowWidth 0 0 var(--cc),
      $boxShadowWidth $boxShadowWidth 0 0 var(--c),   
      $boxShadowWidth 0 0 0 var(--cc) inset,
      0 $boxShadowWidth 0 0 var(--cc) inset!default;
*/

@mixin collapsible-border($color, $width:1px)
{
  box-shadow:$width 0 0 0 $color,
  0 $width 0 0 $color,
  $width $width 0 0 $color,   /* Just to fix the corner */
  $width 0 0 0 $color inset,
  0 $width 0 0 $color inset;
}

/*--- Border ---*/
$borderWidth:$boxShadowWidth;

%border-all {
	border:$borderWidth solid var(--cc, var(--default, #{$boxShadowDefaultColor})); 
}

/*--- Set Color Classes  */
$colorClassPrefix:'c-'!default;
$colorClassContextPrefix:'cc-'!default;
$colorHoverClassPrefix:'ch-'!default;
$backgroundClassPrefix:'b-'!default;
$backgroundHoverClassPrefix:'bh-'!default;
$basicClassPrefix:'bs-'!default;
$fillClassPrefix:'f-'!default;

@mixin setColorClassesFor($a)
{
  @each $n, $c in $a
  {
    &.#{$colorClassPrefix}#{$n}
    {
      color:var(--#{$n});
      --cc:var(--#{$n});
      --cb:var(--on-#{$n});
			--cd:var(--dark-#{$n});
			--cl:var(--light-#{$n});
    }
    &.#{$colorClassContextPrefix}#{$n}
    {
			--cc:var(--#{$n});
			--cd:var(--dark-#{$n});
			--cl:var(--light-#{$n});
    }
		&.#{$colorHoverClassPrefix}#{$n} {
			&:hover,
			&:focus {
				color:var(--#{$n});
				--cc:var(--#{$n});
				--cb:var(--on-#{$n});
				--cd:var(--dark-#{$n});
				--cl:var(--light-#{$n});
			}
		}


  }
}

@mixin setBackgroundClassesFor($a, $family, $color:true)
{
  @each $n, $c in $a
  {
    &.#{$backgroundClassPrefix}#{$n}
    {
      @if color
      {
        background-color:var(--#{$n});
      }
      @else
      {
        background:var(--#{$n});
      }
      color:var(--on-#{$n});
      --cb:var(--#{$n});
      --cc:var(--on-#{$n});
    }

    &.#{$backgroundHoverClassPrefix}#{$n}
    {
      &:hover,
      &:focus
      {
        $hoverBack:HoverForColor($family, $n);
        @if color
        {
          background-color:var(--#{$hoverBack});
        }
        @else
        {
          background:var(--light-#{$hoverBack});
        }
        color:var(--on-#{$n});
        --cb:var(--#{$n});
        --cc:var(--on-#{$n});
      }
    }

    &.#{$backgroundHoverClassPrefix}#{$n}
    {
      &:hover,
      &:focus
      {
        $hoverBack:HoverForColor($family, $n);
        @if color
        {
          background-color:var(--#{$hoverBack});
        }
        @else
        {
          background:var(--light-#{$hoverBack});
        }
        color:var(--on-#{$n});
        --cb:var(--#{$n});
        --cc:var(--on-#{$n});
      }
    }

    &.#{$fillClassPrefix}#{$n}
    {
      --f:var(--#{$n});
    }
  }
}
